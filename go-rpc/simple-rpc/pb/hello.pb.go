// Code generated by protoc-gen-go.
// source: hello.proto
// DO NOT EDIT!

/*
Package hello is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	ToWhom
	Greeting
*/
package hello

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ToWhom struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ToWhom) Reset()                    { *m = ToWhom{} }
func (m *ToWhom) String() string            { return proto.CompactTextString(m) }
func (*ToWhom) ProtoMessage()               {}
func (*ToWhom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ToWhom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Greeting struct {
	GreetMessage string `protobuf:"bytes,1,opt,name=greetMessage" json:"greetMessage,omitempty"`
}

func (m *Greeting) Reset()                    { *m = Greeting{} }
func (m *Greeting) String() string            { return proto.CompactTextString(m) }
func (*Greeting) ProtoMessage()               {}
func (*Greeting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Greeting) GetGreetMessage() string {
	if m != nil {
		return m.GreetMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ToWhom)(nil), "hello.ToWhom")
	proto.RegisterType((*Greeting)(nil), "hello.Greeting")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HelloWorld service

type HelloWorldClient interface {
	SayHello(ctx context.Context, in *ToWhom, opts ...grpc.CallOption) (*Greeting, error)
	SayMoreHellos(ctx context.Context, in *ToWhom, opts ...grpc.CallOption) (HelloWorld_SayMoreHellosClient, error)
	SayHelloToMany(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_SayHelloToManyClient, error)
	LetsTalk(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_LetsTalkClient, error)
}

type helloWorldClient struct {
	cc *grpc.ClientConn
}

func NewHelloWorldClient(cc *grpc.ClientConn) HelloWorldClient {
	return &helloWorldClient{cc}
}

func (c *helloWorldClient) SayHello(ctx context.Context, in *ToWhom, opts ...grpc.CallOption) (*Greeting, error) {
	out := new(Greeting)
	err := grpc.Invoke(ctx, "/hello.HelloWorld/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldClient) SayMoreHellos(ctx context.Context, in *ToWhom, opts ...grpc.CallOption) (HelloWorld_SayMoreHellosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HelloWorld_serviceDesc.Streams[0], c.cc, "/hello.HelloWorld/SayMoreHellos", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldSayMoreHellosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloWorld_SayMoreHellosClient interface {
	Recv() (*Greeting, error)
	grpc.ClientStream
}

type helloWorldSayMoreHellosClient struct {
	grpc.ClientStream
}

func (x *helloWorldSayMoreHellosClient) Recv() (*Greeting, error) {
	m := new(Greeting)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) SayHelloToMany(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_SayHelloToManyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HelloWorld_serviceDesc.Streams[1], c.cc, "/hello.HelloWorld/SayHelloToMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldSayHelloToManyClient{stream}
	return x, nil
}

type HelloWorld_SayHelloToManyClient interface {
	Send(*ToWhom) error
	CloseAndRecv() (*Greeting, error)
	grpc.ClientStream
}

type helloWorldSayHelloToManyClient struct {
	grpc.ClientStream
}

func (x *helloWorldSayHelloToManyClient) Send(m *ToWhom) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldSayHelloToManyClient) CloseAndRecv() (*Greeting, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Greeting)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) LetsTalk(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_LetsTalkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HelloWorld_serviceDesc.Streams[2], c.cc, "/hello.HelloWorld/LetsTalk", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldLetsTalkClient{stream}
	return x, nil
}

type HelloWorld_LetsTalkClient interface {
	Send(*ToWhom) error
	Recv() (*Greeting, error)
	grpc.ClientStream
}

type helloWorldLetsTalkClient struct {
	grpc.ClientStream
}

func (x *helloWorldLetsTalkClient) Send(m *ToWhom) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldLetsTalkClient) Recv() (*Greeting, error) {
	m := new(Greeting)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HelloWorld service

type HelloWorldServer interface {
	SayHello(context.Context, *ToWhom) (*Greeting, error)
	SayMoreHellos(*ToWhom, HelloWorld_SayMoreHellosServer) error
	SayHelloToMany(HelloWorld_SayHelloToManyServer) error
	LetsTalk(HelloWorld_LetsTalkServer) error
}

func RegisterHelloWorldServer(s *grpc.Server, srv HelloWorldServer) {
	s.RegisterService(&_HelloWorld_serviceDesc, srv)
}

func _HelloWorld_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToWhom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.HelloWorld/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServer).SayHello(ctx, req.(*ToWhom))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorld_SayMoreHellos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ToWhom)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloWorldServer).SayMoreHellos(m, &helloWorldSayMoreHellosServer{stream})
}

type HelloWorld_SayMoreHellosServer interface {
	Send(*Greeting) error
	grpc.ServerStream
}

type helloWorldSayMoreHellosServer struct {
	grpc.ServerStream
}

func (x *helloWorldSayMoreHellosServer) Send(m *Greeting) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloWorld_SayHelloToMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).SayHelloToMany(&helloWorldSayHelloToManyServer{stream})
}

type HelloWorld_SayHelloToManyServer interface {
	SendAndClose(*Greeting) error
	Recv() (*ToWhom, error)
	grpc.ServerStream
}

type helloWorldSayHelloToManyServer struct {
	grpc.ServerStream
}

func (x *helloWorldSayHelloToManyServer) SendAndClose(m *Greeting) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldSayHelloToManyServer) Recv() (*ToWhom, error) {
	m := new(ToWhom)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloWorld_LetsTalk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).LetsTalk(&helloWorldLetsTalkServer{stream})
}

type HelloWorld_LetsTalkServer interface {
	Send(*Greeting) error
	Recv() (*ToWhom, error)
	grpc.ServerStream
}

type helloWorldLetsTalkServer struct {
	grpc.ServerStream
}

func (x *helloWorldLetsTalkServer) Send(m *Greeting) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldLetsTalkServer) Recv() (*ToWhom, error) {
	m := new(ToWhom)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloWorld_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.HelloWorld",
	HandlerType: (*HelloWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloWorld_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayMoreHellos",
			Handler:       _HelloWorld_SayMoreHellos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloToMany",
			Handler:       _HelloWorld_SayHelloToMany_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LetsTalk",
			Handler:       _HelloWorld_LetsTalk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x64, 0xb8, 0xd8, 0x42,
	0xf2, 0xc3, 0x33, 0xf2, 0x73, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x3d, 0x2e, 0x0e, 0xf7, 0xa2, 0xd4, 0xd4, 0x92, 0xcc,
	0xbc, 0x74, 0x21, 0x25, 0x2e, 0x9e, 0x74, 0x10, 0xdb, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x1d, 0xa6,
	0x0e, 0x45, 0xcc, 0xe8, 0x3a, 0x23, 0x17, 0x97, 0x07, 0xc8, 0xdc, 0xf0, 0xfc, 0xa2, 0x9c, 0x14,
	0x21, 0x1d, 0x2e, 0x8e, 0xe0, 0xc4, 0x4a, 0xb0, 0x80, 0x10, 0xaf, 0x1e, 0xc4, 0x76, 0x88, 0x6d,
	0x52, 0xfc, 0x50, 0x2e, 0xcc, 0x78, 0x25, 0x06, 0x21, 0x63, 0x2e, 0xde, 0xe0, 0xc4, 0x4a, 0xdf,
	0xfc, 0xa2, 0x54, 0xb0, 0x8e, 0x62, 0xc2, 0x5a, 0x0c, 0x18, 0x85, 0x4c, 0xb8, 0xf8, 0x60, 0x56,
	0x84, 0xe4, 0xfb, 0x26, 0xe6, 0x55, 0x12, 0xd6, 0xa5, 0xc1, 0x28, 0x64, 0xc0, 0xc5, 0xe1, 0x93,
	0x5a, 0x52, 0x1c, 0x92, 0x98, 0x93, 0x4d, 0x8c, 0x7a, 0x03, 0xc6, 0x24, 0x36, 0x70, 0xa8, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xbf, 0xb7, 0x11, 0x44, 0x01, 0x00, 0x00,
}
